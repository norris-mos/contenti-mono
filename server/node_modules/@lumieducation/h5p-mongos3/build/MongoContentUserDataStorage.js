"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var h5p_server_1 = require("@lumieducation/h5p-server");
var log = new h5p_server_1.Logger('MongoContentUserDataStorage');
/**
 * MongoDB storage for user data and finished data.
 *
 * It is highly recommended to call `createIndexes` on initialization.
 */
var MongoContentUserDataStorage = /** @class */ (function () {
    /**
     * @param userDataCollection a MongoDB collection (read- and writable)
     * @param finishedCollection a MongoDB collection (read- and writable)
     */
    function MongoContentUserDataStorage(userDataCollection, finishedCollection) {
        this.userDataCollection = userDataCollection;
        this.finishedCollection = finishedCollection;
        log.info('initialize');
    }
    /**
     * Creates indexes to speed up read access. Can be safely used even if
     * indexes already exist.
     */
    MongoContentUserDataStorage.prototype.createIndexes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userDataCollection.createIndexes([
                            {
                                key: {
                                    contentId: 1
                                }
                            },
                            {
                                key: {
                                    contentId: 1,
                                    invalidate: 1
                                }
                            },
                            {
                                key: {
                                    contentId: 1,
                                    dataType: 1,
                                    subContentId: 1,
                                    userId: 1
                                }
                            },
                            {
                                key: {
                                    userId: 1
                                }
                            },
                            {
                                key: {
                                    contentId: 1,
                                    userId: 1
                                }
                            }
                        ])];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.finishedCollection.createIndexes([
                                {
                                    key: {
                                        contentId: 1,
                                        userId: 1
                                    }
                                },
                                {
                                    key: {
                                        contentId: 1
                                    }
                                },
                                {
                                    key: {
                                        userId: 1
                                    }
                                }
                            ])];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.getContentUserData = function (contentId, dataType, subContentId, user) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        log.debug("getContentUserData: loading contentUserData for contentId ".concat(contentId, " and userId ").concat(user.id));
                        _a = this.cleanMongoUserData;
                        return [4 /*yield*/, this.userDataCollection.findOne({
                                contentId: contentId,
                                dataType: dataType,
                                subContentId: subContentId,
                                userId: user.id
                            })];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.getContentUserDataByUser = function (user) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.userDataCollection
                            .find({
                            userId: user.id
                        })
                            .toArray()];
                    case 1: return [2 /*return*/, (_a = (_b.sent())) === null || _a === void 0 ? void 0 : _a.map(this.cleanMongoUserData)];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.createOrUpdateContentUserData = function (userData) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userDataCollection.replaceOne({
                            contentId: userData.contentId,
                            dataType: userData.dataType,
                            subContentId: userData.subContentId,
                            userId: userData.userId
                        }, {
                            contentId: userData.contentId,
                            dataType: userData.dataType,
                            subContentId: userData.subContentId,
                            userState: userData.userState,
                            invalidate: userData.invalidate,
                            preload: userData.preload,
                            userId: userData.userId
                        }, { upsert: true })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.createOrUpdateFinishedData = function (finishedData) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.finishedCollection.replaceOne({
                            contentId: finishedData.contentId,
                            userId: finishedData.userId
                        }, {
                            contentId: finishedData.contentId,
                            score: finishedData.score,
                            maxScore: finishedData.maxScore,
                            openedTimestamp: finishedData.openedTimestamp,
                            finishedTimestamp: finishedData.finishedTimestamp,
                            completionTime: finishedData.completionTime,
                            userId: finishedData.userId
                        }, { upsert: true })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.deleteInvalidatedContentUserData = function (contentId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userDataCollection.deleteMany({
                            contentId: contentId,
                            invalidate: true
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.deleteAllContentUserDataByUser = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userDataCollection.deleteMany({
                            userId: user.id
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.deleteAllContentUserDataByContentId = function (contentId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userDataCollection.deleteMany({
                            contentId: contentId
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.getContentUserDataByContentIdAndUser = function (contentId, user) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.userDataCollection
                            .find({ contentId: contentId, userId: user.id })
                            .toArray()];
                    case 1: return [2 /*return*/, (_a = (_b.sent())) === null || _a === void 0 ? void 0 : _a.map(this.cleanMongoUserData)];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.getFinishedDataByContentId = function (contentId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.finishedCollection
                            .find({ contentId: contentId })
                            .toArray()];
                    case 1: return [2 /*return*/, (_a = (_b.sent())) === null || _a === void 0 ? void 0 : _a.map(this.cleanMongoFinishedData)];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.getFinishedDataByUser = function (user) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.finishedCollection
                            .find({ userId: user.id })
                            .toArray()];
                    case 1: return [2 /*return*/, (_a = (_b.sent())) === null || _a === void 0 ? void 0 : _a.map(this.cleanMongoFinishedData)];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.deleteFinishedDataByContentId = function (contentId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.finishedCollection.deleteMany({ contentId: contentId })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoContentUserDataStorage.prototype.deleteFinishedDataByUser = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.finishedCollection.deleteMany({ userId: user.id })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To avoid leaking internal MongoDB data (id), this method maps the data
     * we've received from Mongo to a new object.
     * @param mongoData the original data received by MongoDB
     * @returns the same data but with all Mongo-internal fields removed
     */
    MongoContentUserDataStorage.prototype.cleanMongoUserData = function (mongoData) {
        if (!mongoData) {
            return mongoData;
        }
        return {
            dataType: mongoData.dataType,
            invalidate: mongoData.invalidate,
            preload: mongoData.preload,
            subContentId: mongoData.subContentId,
            userState: mongoData.userState,
            contentId: mongoData.contentId,
            userId: mongoData.userId
        };
    };
    /**
     * To avoid leaking internal MongoDB data (id), this method maps the data
     * we've received from Mongo to a new object.
     * @param mongoData the original data received by MongoDB
     * @returns the same data but with all Mongo-internal fields removed
     */
    MongoContentUserDataStorage.prototype.cleanMongoFinishedData = function (mongoData) {
        if (!mongoData) {
            return mongoData;
        }
        return {
            completionTime: mongoData.completionTime,
            contentId: mongoData.contentId,
            finishedTimestamp: mongoData.finishedTimestamp,
            maxScore: mongoData.maxScore,
            openedTimestamp: mongoData.openedTimestamp,
            score: mongoData.score,
            userId: mongoData.userId
        };
    };
    return MongoContentUserDataStorage;
}());
exports.default = MongoContentUserDataStorage;
//# sourceMappingURL=MongoContentUserDataStorage.js.map