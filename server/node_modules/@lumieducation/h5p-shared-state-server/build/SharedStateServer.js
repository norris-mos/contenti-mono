"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sharedb_1 = __importDefault(require("sharedb"));
var ws_1 = __importDefault(require("ws"));
var websocket_json_stream_1 = __importDefault(require("@teamwork/websocket-json-stream"));
var util_1 = require("util");
var debug_1 = __importDefault(require("debug"));
var ValidatorRepository_1 = __importDefault(require("./ValidatorRepository"));
var injectUser_1 = __importDefault(require("./middleware/injectUser"));
var checkPermissionsAndInjectContentContext_1 = __importDefault(require("./middleware/checkPermissionsAndInjectContentContext"));
var validateOpSchema_1 = __importDefault(require("./middleware/validateOpSchema"));
var performOpLogicChecks_1 = __importDefault(require("./middleware/performOpLogicChecks"));
var validateCommitSchema_1 = __importDefault(require("./middleware/validateCommitSchema"));
var performCommitLogicChecks_1 = __importDefault(require("./middleware/performCommitLogicChecks"));
var log = (0, debug_1.default)('h5p:SharedStateServer:SharedStateServer');
/**
 * Main entry point into the share-state functionality.
 *
 * This class opens a Websocket on the server to which clients can connect to
 * and send ops via ShareDB to modify the shared state. The shared state
 * validates the changes against the library schema, propagates them to the
 * other connected clients and persists the state.
 */
var SharedStateServer = /** @class */ (function () {
    /**
     *
     * @param httpServer a http server that can be used to open the websocket
     * @param getLibraryMetadata return the library metadata (= library.json)
     * for a library
     * @param getLibraryFileAsJson  return an arbitrary JSON file for a specific
     * library; throw an error if the file doesn't exist or if it's not JSON
     * @param requestToUserCallback converts the request that is used to
     * initiate the websocket connection to the user object for the user who is
     * making the request; this is used to authenticate a user who connects to
     * the websocket
     * @param getPermissionForUser returns the permission a user has to a
     * specific content object
     * @param getContentMetadata returns the metadata (h5p.json) for a piece of
     * content
     * @param getContentParameters returns the parameters (content.json) for a
     * piece of content
     */
    function SharedStateServer(httpServer, getLibraryMetadata, getLibraryFileAsJson, requestToUserCallback, getPermissionForUser, getContentMetadata, getContentParameters, options) {
        var _this = this;
        var _a;
        this.getLibraryMetadata = getLibraryMetadata;
        this.requestToUserCallback = requestToUserCallback;
        this.getPermissionForUser = getPermissionForUser;
        this.getContentMetadata = getContentMetadata;
        this.getContentParameters = getContentParameters;
        this.options = options;
        /**
         * Call this method when a content object is deleted or changed in the host
         * system. This will delete the state from the system (and also notify users
         * who are currently connected)
         * @param contentId
         */
        this.deleteState = function (contentId) { return __awaiter(_this, void 0, void 0, function () {
            var connection, doc, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log('Deleting shared user state for contentId %s', contentId);
                        connection = this.backend.connect();
                        doc = connection.get('h5p', contentId);
                        // The ShareDB API is not promisified and relies on on this usage, so we
                        // have to bind the Promises
                        return [4 /*yield*/, (0, util_1.promisify)(doc.fetch).bind(doc)()];
                    case 1:
                        // The ShareDB API is not promisified and relies on on this usage, so we
                        // have to bind the Promises
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, (0, util_1.promisify)(doc.del).bind(doc)({})];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        console.error(error_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        // The URL building method assumes there is no trailing slash in the
        // baseUrl, so we make sure the baseUrl doesn't include one.
        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.baseUrl) && this.options.baseUrl.endsWith('/')) {
            this.options.baseUrl = this.options.baseUrl.substring(0, this.options.baseUrl.length - 1);
        }
        this.validatorRepository = new ValidatorRepository_1.default(getLibraryFileAsJson);
        this.setupShareDBMiddleware();
        // Connect any incoming WebSocket connection to ShareDB
        var wss = new ws_1.default.Server({
            server: httpServer,
            path: this.getWsUrl()
        });
        wss.on('connection', function (ws, request) { return __awaiter(_this, void 0, void 0, function () {
            var user, stream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log('Websocket connected');
                        return [4 /*yield*/, this.requestToUserCallback(request)];
                    case 1:
                        user = _a.sent();
                        request.user = user;
                        stream = new websocket_json_stream_1.default(ws);
                        this.backend.listen(stream, request);
                        ws.on('close', function () {
                            log('Websocket disconnected');
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    }
    /**
     * Adds all the required middleware to a new ShareDB object
     */
    SharedStateServer.prototype.setupShareDBMiddleware = function () {
        this.backend = new sharedb_1.default();
        this.backend.use('connect', injectUser_1.default);
        // "Submit" is the earliest point at which we can check individual
        // messages by the client.
        this.backend.use('submit', (0, checkPermissionsAndInjectContentContext_1.default)(this.getPermissionForUser, this.getLibraryMetadata, this.getContentMetadata, this.getContentParameters));
        this.backend.use('submit', (0, validateOpSchema_1.default)(this.validatorRepository));
        // We use 'apply' for the op logic checks as we have access to the old
        // snapshot then, which we wouldn't have in 'submit'. Some OP checks
        // require the old snapshot.
        this.backend.use('apply', (0, performOpLogicChecks_1.default)(this.validatorRepository));
        // "Commit" means the changes of the ops were applied to the old
        // snapshot and there is a new one that we can check.
        this.backend.use('commit', (0, validateCommitSchema_1.default)(this.validatorRepository));
        this.backend.use('commit', (0, performCommitLogicChecks_1.default)(this.validatorRepository));
    };
    /**
     * @returns the URL at which the websocket should be opened.
     */
    SharedStateServer.prototype.getWsUrl = function () {
        var _a;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.baseUrl) {
            return "".concat(this.options.baseUrl, "/shared-state");
        }
        return '/shared-state';
    };
    return SharedStateServer;
}());
exports.default = SharedStateServer;
//# sourceMappingURL=SharedStateServer.js.map