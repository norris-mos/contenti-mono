{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","message"],"sources":["/Users/maxoliverstapyltonnorris/H5P-Nodejs-library/packages/h5p-rest-example-client/src/serviceWorker.ts"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}