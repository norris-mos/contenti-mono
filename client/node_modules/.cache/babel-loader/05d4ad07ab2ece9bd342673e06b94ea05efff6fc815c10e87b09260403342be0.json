{"ast":null,"code":"export class ContentService {\n  /**\n   *\n   */\n  constructor() {\n    let baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    this.baseUrl = baseUrl;\n    this.csrfToken = undefined;\n    this.delete = async contentId => {\n      var _this$csrfToken;\n      console.log(`ContentService: deleting ${contentId}...`);\n      const result = await fetch(`${this.baseUrl}/${contentId}`, {\n        method: 'delete',\n        headers: {\n          'CSRF-Token': (_this$csrfToken = this.csrfToken) !== null && _this$csrfToken !== void 0 ? _this$csrfToken : ''\n        }\n      });\n      if (!result.ok) {\n        throw new Error(`Error while deleting content: ${result.status} ${result.statusText} ${await result.text()}`);\n      }\n    };\n    this.getEdit = async contentId => {\n      console.log(`ContentService: Getting information to edit ${contentId}...`);\n      const res = await fetch(`${this.baseUrl}/${contentId}/edit`);\n      if (!res || !res.ok) {\n        throw new Error(`${res.status} ${res.statusText}`);\n      }\n      return res.json();\n    };\n    this.getPlay = async contentId => {\n      console.log(`ContentService: Getting information to play ${contentId}...`);\n      const res = await fetch(`${this.baseUrl}/${contentId}/play`);\n      if (!res || !res.ok) {\n        throw new Error(`${res.status} ${res.statusText}`);\n      }\n      return res.json();\n    };\n    this.list = async () => {\n      console.log(`ContentService: Listing content objects`);\n      const result = await fetch(this.baseUrl);\n      if (result.ok) {\n        return result.json();\n      }\n      throw new Error(`Request to REST endpoint returned ${result.status} ${result.statusText}: ${await result.text()}`);\n    };\n    this.save = async (contentId, requestBody) => {\n      var _this$csrfToken2, _this$csrfToken3;\n      if (contentId) {\n        console.log(`ContentService: Saving new content.`);\n      } else {\n        console.log(`ContentService: Saving content ${contentId}`);\n      }\n      const body = JSON.stringify(requestBody);\n      const res = contentId ? await fetch(`${this.baseUrl}/${contentId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'CSRF-Token': (_this$csrfToken2 = this.csrfToken) !== null && _this$csrfToken2 !== void 0 ? _this$csrfToken2 : ''\n        },\n        body\n      }) : await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'CSRF-Token': (_this$csrfToken3 = this.csrfToken) !== null && _this$csrfToken3 !== void 0 ? _this$csrfToken3 : ''\n        },\n        body\n      });\n      if (!res || !res.ok) {\n        throw new Error(`${res.status} ${res.statusText} - ${await res.text()}`);\n      }\n      return res.json();\n    };\n    this.generateDownloadLink = contentId => `${this.baseUrl}/download/${contentId}`;\n    this.setCsrfToken = csrfToken => {\n      this.csrfToken = csrfToken;\n    };\n    this.getCsrfToken = () => {\n      return this.csrfToken;\n    };\n  }\n}","map":{"version":3,"names":["ContentService","constructor","baseUrl","arguments","length","undefined","csrfToken","delete","contentId","_this$csrfToken","console","log","result","fetch","method","headers","ok","Error","status","statusText","text","getEdit","res","json","getPlay","list","save","requestBody","_this$csrfToken2","_this$csrfToken3","body","JSON","stringify","generateDownloadLink","setCsrfToken","getCsrfToken"],"sources":["/Users/maxoliverstapyltonnorris/H5P-Nodejs-library/packages/h5p-rest-example-client/src/services/ContentService.ts"],"sourcesContent":["import type {\n    IEditorModel,\n    IPlayerModel,\n    IContentMetadata\n} from '@lumieducation/h5p-server';\n\nexport interface IContentListEntry {\n    contentId: string;\n    mainLibrary: string;\n    title: string;\n    originalNewKey?: string;\n}\n\nexport interface IContentService {\n    delete(contentId: string): Promise<void>;\n    getEdit(contentId: string): Promise<IEditorModel>;\n    getPlay(contentId: string): Promise<IPlayerModel>;\n    list(): Promise<IContentListEntry[]>;\n    save(\n        contentId: string,\n        requestBody: { library: string; params: any }\n    ): Promise<{ contentId: string; metadata: IContentMetadata }>;\n    generateDownloadLink(contentId: string): string;\n}\n\nexport class ContentService implements IContentService {\n    /**\n     *\n     */\n    constructor(protected baseUrl: string = '') {}\n\n    private csrfToken: string | undefined = undefined;\n\n    delete = async (contentId: string): Promise<void> => {\n        console.log(`ContentService: deleting ${contentId}...`);\n        const result = await fetch(`${this.baseUrl}/${contentId}`, {\n            method: 'delete',\n            headers: {\n                'CSRF-Token': this.csrfToken ?? ''\n            }\n        });\n        if (!result.ok) {\n            throw new Error(\n                `Error while deleting content: ${result.status} ${\n                    result.statusText\n                } ${await result.text()}`\n            );\n        }\n    };\n\n    getEdit = async (contentId: string): Promise<IEditorModel> => {\n        console.log(\n            `ContentService: Getting information to edit ${contentId}...`\n        );\n        const res = await fetch(`${this.baseUrl}/${contentId}/edit`);\n        if (!res || !res.ok) {\n            throw new Error(`${res.status} ${res.statusText}`);\n        }\n        return res.json();\n    };\n\n    getPlay = async (contentId: string): Promise<IPlayerModel> => {\n        console.log(\n            `ContentService: Getting information to play ${contentId}...`\n        );\n        const res = await fetch(`${this.baseUrl}/${contentId}/play`);\n        if (!res || !res.ok) {\n            throw new Error(`${res.status} ${res.statusText}`);\n        }\n        return res.json();\n    };\n\n    list = async (): Promise<IContentListEntry[]> => {\n        console.log(`ContentService: Listing content objects`);\n        const result = await fetch(this.baseUrl);\n        if (result.ok) {\n            return result.json();\n        }\n        throw new Error(\n            `Request to REST endpoint returned ${result.status} ${\n                result.statusText\n            }: ${await result.text()}`\n        );\n    };\n\n    save = async (\n        contentId: string,\n        requestBody: { library: string; params: any }\n    ): Promise<{ contentId: string; metadata: IContentMetadata }> => {\n        if (contentId) {\n            console.log(`ContentService: Saving new content.`);\n        } else {\n            console.log(`ContentService: Saving content ${contentId}`);\n        }\n\n        const body = JSON.stringify(requestBody);\n\n        const res = contentId\n            ? await fetch(`${this.baseUrl}/${contentId}`, {\n                  method: 'PATCH',\n                  headers: {\n                      'Content-Type': 'application/json',\n                      'CSRF-Token': this.csrfToken ?? ''\n                  },\n                  body\n              })\n            : await fetch(this.baseUrl, {\n                  method: 'POST',\n                  headers: {\n                      'Content-Type': 'application/json',\n                      'CSRF-Token': this.csrfToken ?? ''\n                  },\n                  body\n              });\n\n        if (!res || !res.ok) {\n            throw new Error(\n                `${res.status} ${res.statusText} - ${await res.text()}`\n            );\n        }\n        return res.json();\n    };\n    generateDownloadLink = (contentId: string): string =>\n        `${this.baseUrl}/download/${contentId}`;\n\n    setCsrfToken = (csrfToken): void => {\n        this.csrfToken = csrfToken;\n    };\n    getCsrfToken = (): string | undefined => {\n        return this.csrfToken;\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}