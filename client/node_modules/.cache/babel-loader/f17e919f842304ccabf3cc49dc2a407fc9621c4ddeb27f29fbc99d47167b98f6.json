{"ast":null,"code":"import { mergeH5PIntegration, removeUnusedContent } from './h5p-utils';\nimport { addScripts, addStylesheets } from './dom-utils';\n/**\n * A Web Component displaying H5P content.\n */\nexport class H5PPlayerComponent extends HTMLElement {\n  get contentId() {\n    return this.getAttribute('content-id');\n  }\n  set contentId(contentId) {\n    this.setAttribute('content-id', contentId);\n  }\n  /**\n   * The internal H5P instance object of the H5P content.\n   *\n   * Only available after the `initialized` event was fired. Important: This\n   * object is only partially typed and there are more properties and methods\n   * on it!\n   */\n  get h5pInstance() {\n    return this.h5pInstanceInternal;\n  }\n  set h5pInstance(value) {\n    this.h5pInstanceInternal = value;\n  }\n  /**\n   * The global H5P object / namespace (normally accessible through \"H5P...\"\n   * or \"window.H5P\") of the content type. Depending on the embed type this\n   * can be an object from the internal iframe, so you can use it to break the\n   * barrier of the iframe and execute JavaScript inside the iframe.\n   *\n   * Only available after the `initialized` event was fired. Important: This\n   * object is only partially typed and there are more properties and methods\n   * on it!\n   */\n  get h5pObject() {\n    return this.h5pObjectInternal;\n  }\n  set h5pObject(value) {\n    this.h5pObjectInternal = value;\n  }\n  /**\n   * The window object in which the H5P object exists and is rendered in. This\n   * is the iframe's contentWindow or the parent's window, depending on the\n   * embed type.\n   */\n  get h5pWindow() {\n    return this.h5pWindowInternal;\n  }\n  set h5pWindow(value) {\n    this.h5pWindowInternal = value;\n  }\n  /**\n   * Called when the component needs to load data about content. The endpoint\n   * called in here should call H5PPlayer.render() and send back the player\n   * model.\n   *\n   * Should throw an error with a message in the message property if something\n   * goes wrong.\n   */\n  get loadContentCallback() {\n    return this.privateLoadContentCallback;\n  }\n  set loadContentCallback(callback) {\n    const mustRender = this.privateLoadContentCallback !== callback;\n    this.privateLoadContentCallback = callback;\n    if (mustRender) {\n      this.render(this.contentId);\n    }\n  }\n  /**\n   * Indicates changes to which attributes should trigger calls to\n   * attributeChangedCallback.\n   * @memberof H5PPlayerComponent\n   */\n  static get observedAttributes() {\n    return ['content-id'];\n  }\n  constructor() {\n    super();\n    /**\n     * Called when any H5P content signals that it was initialized\n     */\n    this.onContentInitialized = () => {\n      var _a, _b, _c;\n      const divMode = this.playerModel.embedTypes.includes('div');\n      this.h5pObject = divMode ? window.H5P : document.getElementById(`h5p-iframe-${this.playerModel.contentId}`).contentWindow.H5P;\n      this.h5pWindow = divMode ? window : document.getElementById(`h5p-iframe-${this.playerModel.contentId}`).contentWindow;\n      this.h5pInstance = (_b = (_a = this.h5pObject) === null || _a === void 0 ? void 0 : _a.instances) === null || _b === void 0 ? void 0 : _b.find(\n      // H5P converts our string contentId into number, so we don't use ===\n      // eslint-disable-next-line eqeqeq\n      i => i.contentId == this.contentId);\n      if (this.h5pInstance) {\n        this.dispatchEvent(new CustomEvent('initialized', {\n          detail: {\n            contentId: this.contentId\n          }\n        }));\n        if ((_c = window.H5P) === null || _c === void 0 ? void 0 : _c.externalDispatcher) {\n          window.H5P.externalDispatcher.off('initialized', this.onContentInitialized);\n        }\n      }\n    };\n    this.onxAPI = event => {\n      var _a, _b, _c, _d;\n      if (`${(_d = (_c = (_b = (_a = event.data) === null || _a === void 0 ? void 0 : _a.statement) === null || _b === void 0 ? void 0 : _b.object) === null || _c === void 0 ? void 0 : _c.definition) === null || _d === void 0 ? void 0 : _d.extensions['http://h5p.org/x-api/h5p-local-content-id']}` === `${this.playerModel.contentId}`) {\n        const context = {\n          contentId: this.playerModel.contentId\n        };\n        this.dispatchEvent(new CustomEvent('xAPI', {\n          detail: {\n            statement: event.data.statement,\n            context,\n            event\n          }\n        }));\n      }\n    };\n    H5PPlayerComponent.initTemplate();\n  }\n  static initTemplate() {\n    // We create the static template only once\n    if (!H5PPlayerComponent.template) {\n      H5PPlayerComponent.template = document.createElement('template');\n      H5PPlayerComponent.template.innerHTML = `\n                <style>\n                    .h5p-iframe {\n                        font-family: Sans-Serif;\n                        width: 100%;\n                        margin: 0;\n                        padding: 0;\n                    }\n                    .h5p-iframe .h5p-container {\n                        overflow: hidden;\n                    }\n                    .h5p-iframe .h5p-content {\n                        font-size: 16px;\n                        line-height: 1.5em;\n                        width: 100%;\n                        height: auto;\n                    }\n                    .h5p-iframe .h5p-fullscreen .h5p-content,\n                    .h5p-fullscreen .h5p-iframe,\n                    .h5p-iframe .h5p-semi-fullscreen .h5p-content {\n                        height: 100%;\n                    }\n                </style>\n                <div class=\"h5p-player-component-root\"></div>\n                `;\n    }\n  }\n  /**\n   * Called when one of the attributes in observedAttributes changes.\n   */\n  async attributeChangedCallback(name, oldVal, newVal) {\n    if (name === 'content-id') {\n      if (oldVal) {\n        removeUnusedContent(oldVal);\n      }\n      await this.render(newVal);\n    }\n  }\n  /**\n   * Called when the component is added to the DOM.\n   */\n  connectedCallback() {\n    this.appendChild(H5PPlayerComponent.template.content.cloneNode(true));\n    this.root = this.querySelector('.h5p-player-component-root');\n    // We must notify the H5P content inside the player that the size of the\n    // component has changed. Otherwise some content types won't resize\n    // properly.\n    this.resizeObserver = new ResizeObserver(() => {\n      var _a;\n      if ((_a = window.H5P) === null || _a === void 0 ? void 0 : _a.instances) {\n        window.H5P.instances.forEach(instance => {\n          instance.trigger('resize');\n        });\n      }\n    });\n    this.resizeObserver.observe(this);\n  }\n  /**\n   * Called when the component is removed from the DOM.\n   */\n  disconnectedCallback() {\n    var _a;\n    if (this.contentId) {\n      removeUnusedContent(this.contentId);\n    }\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n    if ((_a = window.H5P) === null || _a === void 0 ? void 0 : _a.externalDispatcher) {\n      window.H5P.externalDispatcher.off('initialized', this.onContentInitialized);\n      window.H5P.externalDispatcher.off('xAPI', this.onxAPI);\n    }\n  }\n  /**\n   * Returns the copyright notice in HTML that you can insert somewhere to\n   * display it. Undefined if there is no copyright information.\n   */\n  getCopyrightHtml() {\n    var _a;\n    if (!this.h5pInstance) {\n      console.error('Cannot show copyright as H5P instance is undefined. The H5P object might not be initialized yet.');\n      return undefined;\n    }\n    if (!this.h5pObject) {\n      console.error('H5P object undefined. This typically means H5P has not been initialized yet.');\n      return undefined;\n    }\n    let metadata = (_a = this.h5pInstance.contentData) === null || _a === void 0 ? void 0 : _a.metadata;\n    if (!metadata) {\n      metadata = this.playerModel.integration.contents[`cid-${this.playerModel.contentId}`].metadata;\n      if (!metadata) {\n        return undefined;\n      }\n    }\n    let parameters;\n    // We need to call JSON.parse in the context of the window the H5P\n    // content exists in. The reason is that H5P.getCopyrights compares\n    // object prototypes when traversing the parameters and the object\n    // prototypes are not identical across windows.  (Cp.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof#instanceof_and_multiple_context_e.g._frames_or_windows)\n    try {\n      parameters = this.h5pWindow.JSON.parse(this.playerModel.integration.contents[`cid-${this.playerModel.contentId}`].jsonContent);\n    } catch (error) {\n      console.error('Could not get parameters for content object with id ', this.playerModel.contentId, '. The copyright text might be incomplete. Details: ', error);\n    }\n    return this.h5pObject.getCopyrights(this.h5pInstance, parameters, this.playerModel.contentId, metadata);\n  }\n  /**\n   * @returns true if there is copyright information to be displayed.\n   */\n  hasCopyrightInformation() {\n    return !!this.getCopyrightHtml();\n  }\n  /**\n   * Asks the H5P content to resize itself inside the dimensions of the\n   * container.\n   *\n   * Has no effect until the H5P object has fully initialized.\n   */\n  resize() {\n    if (!this.h5pInstance || !this.h5pInstance.trigger) {\n      return;\n    }\n    this.h5pInstance.trigger('resize');\n  }\n  /**\n   * Displays the copyright notice in the regular H5P way.\n   */\n  showCopyright() {\n    const copyrightHtml = this.getCopyrightHtml();\n    const dialog = new this.h5pObject.Dialog('copyrights', this.h5pObject.t('copyrightInformation'), copyrightHtml, this.h5pObject.jQuery('.h5p-container'));\n    dialog.open(true);\n  }\n  /**\n   * Displays content.\n   * @param {string} contentId\n   */\n  async render(contentId) {\n    if (!this.loadContentCallback) {\n      return;\n    }\n    // Get data from H5P server\n    try {\n      this.playerModel = await this.loadContentCallback(contentId);\n    } catch (error) {\n      this.root.innerHTML = `<p>Error loading H5P content from server: ${error.message}</p>`;\n      return;\n    }\n    // Reset the component's DOM\n    this.root.innerHTML = '';\n    // We have to prevent H5P from initializing when the h5p.js file is\n    // loaded.\n    if (!window.H5P) {\n      window.H5P = {};\n    }\n    window.H5P.preventInit = true;\n    // We merge the H5P integration we received from the server with the one\n    // that already exists in the window globally to allow for several H5P\n    // content objects on a single page.\n    mergeH5PIntegration(this.playerModel.integration, this.playerModel.contentId);\n    // The server has already told us which embed types are generally\n    // acceptable for the content type, but we prefer div if possible to\n    // avoid too many iframes.\n    if (this.playerModel.embedTypes.includes('div')) {\n      await this.renderDiv(this.playerModel);\n    } else {\n      await this.renderIframe(this.playerModel);\n    }\n    // Initialize H5P with the component as root\n    window.H5P.preventInit = false;\n    if (window.H5P.externalDispatcher) {\n      window.H5P.externalDispatcher.on('initialized', this.onContentInitialized, this);\n    }\n    window.H5P.preventInit = false;\n    if (window.H5P.externalDispatcher) {\n      // detach xAPI listener first to avoid having multiple listeners on the\n      // same content (can safely be done even if it hasn't been attached\n      // before)\n      window.H5P.externalDispatcher.off('xAPI', this.onxAPI);\n      // attach xAPI listener\n      window.H5P.externalDispatcher.on('xAPI', this.onxAPI);\n    }\n    window.H5P.init(this.root);\n  }\n  /**\n   * Creates a new DOM for the H5P using a div as container.\n   */\n  async renderDiv(playerModel) {\n    addStylesheets(playerModel.styles, document.getElementsByTagName('head')[0]);\n    await addScripts(playerModel.scripts, document.getElementsByTagName('head')[0]);\n    const h5pContainerDiv = document.createElement('div');\n    h5pContainerDiv.className = 'h5p-iframe';\n    this.root.appendChild(h5pContainerDiv);\n    const h5pContentDiv = document.createElement('div');\n    h5pContentDiv.className = 'h5p-content';\n    h5pContentDiv.dataset.contentId = playerModel.contentId;\n    h5pContainerDiv.appendChild(h5pContentDiv);\n  }\n  /**\n   * Creates a new DOM for the H5P using an iframe as container.\n   * @param {IPlayerModel} playerModel\n   */\n  async renderIframe(playerModel) {\n    // We don't need to load styles, as they are all loaded within the\n    // iframe.\n    await addScripts(window.H5PIntegration.core.scripts, document.getElementsByTagName('head')[0]);\n    const h5pIFrameWrapper = document.createElement('div');\n    h5pIFrameWrapper.className = `h5p-iframe-wrapper`;\n    h5pIFrameWrapper.innerHTML = `<iframe id=\"h5p-iframe-${playerModel.contentId}\"\n        class=\"h5p-iframe\" data-content-id=\"${playerModel.contentId}\"\n        style=\"height:1px\" src=\"about:blank\" frameBorder=\"0\" scrolling=\"no\"\n        title=\"H5P\"></iframe>`;\n    this.root.appendChild(h5pIFrameWrapper);\n  }\n}","map":{"version":3,"names":["mergeH5PIntegration","removeUnusedContent","addScripts","addStylesheets","H5PPlayerComponent","HTMLElement","contentId","getAttribute","setAttribute","h5pInstance","h5pInstanceInternal","value","h5pObject","h5pObjectInternal","h5pWindow","h5pWindowInternal","loadContentCallback","privateLoadContentCallback","callback","mustRender","render","observedAttributes","constructor","onContentInitialized","divMode","playerModel","embedTypes","includes","window","H5P","document","getElementById","contentWindow","_b","_a","instances","find","i","dispatchEvent","CustomEvent","detail","_c","externalDispatcher","off","onxAPI","event","_d","data","statement","object","definition","extensions","context","initTemplate","template","createElement","innerHTML","attributeChangedCallback","name","oldVal","newVal","connectedCallback","appendChild","content","cloneNode","root","querySelector","resizeObserver","ResizeObserver","forEach","instance","trigger","observe","disconnectedCallback","disconnect","getCopyrightHtml","console","error","undefined","metadata","contentData","integration","contents","parameters","JSON","parse","jsonContent","getCopyrights","hasCopyrightInformation","resize","showCopyright","copyrightHtml","dialog","Dialog","t","jQuery","open","message","preventInit","renderDiv","renderIframe","on","init","styles","getElementsByTagName","scripts","h5pContainerDiv","className","h5pContentDiv","dataset","H5PIntegration","core","h5pIFrameWrapper"],"sources":["/Users/maxoliverstapyltonnorris/contenti-mono/h5p-rest-example-client/node_modules/@lumieducation/h5p-webcomponents/src/h5p-player.ts"],"sourcesContent":["import type { IPlayerModel } from '@lumieducation/h5p-server';\n\nimport { mergeH5PIntegration, removeUnusedContent } from './h5p-utils';\nimport { addScripts, addStylesheets } from './dom-utils';\nimport { IH5P, IH5PInstance } from './h5p-types';\n\nexport interface IxAPIEvent {\n    data: {\n        statement: any;\n    };\n}\n\nexport interface IContext {\n    contentId: string;\n}\n\n/**\n * A Web Component displaying H5P content.\n */\nexport class H5PPlayerComponent extends HTMLElement {\n    get contentId(): string {\n        return this.getAttribute('content-id');\n    }\n\n    set contentId(contentId: string) {\n        this.setAttribute('content-id', contentId);\n    }\n\n    /**\n     * The internal H5P instance object of the H5P content.\n     *\n     * Only available after the `initialized` event was fired. Important: This\n     * object is only partially typed and there are more properties and methods\n     * on it!\n     */\n    get h5pInstance(): IH5PInstance {\n        return this.h5pInstanceInternal;\n    }\n    private set h5pInstance(value: IH5PInstance) {\n        this.h5pInstanceInternal = value;\n    }\n\n    /**\n     * The global H5P object / namespace (normally accessible through \"H5P...\"\n     * or \"window.H5P\") of the content type. Depending on the embed type this\n     * can be an object from the internal iframe, so you can use it to break the\n     * barrier of the iframe and execute JavaScript inside the iframe.\n     *\n     * Only available after the `initialized` event was fired. Important: This\n     * object is only partially typed and there are more properties and methods\n     * on it!\n     */\n    get h5pObject(): IH5P {\n        return this.h5pObjectInternal;\n    }\n    private set h5pObject(value: IH5P) {\n        this.h5pObjectInternal = value;\n    }\n\n    /**\n     * The window object in which the H5P object exists and is rendered in. This\n     * is the iframe's contentWindow or the parent's window, depending on the\n     * embed type.\n     */\n    get h5pWindow(): any {\n        return this.h5pWindowInternal;\n    }\n    private set h5pWindow(value: any) {\n        this.h5pWindowInternal = value;\n    }\n\n    /**\n     * Called when the component needs to load data about content. The endpoint\n     * called in here should call H5PPlayer.render() and send back the player\n     * model.\n     *\n     * Should throw an error with a message in the message property if something\n     * goes wrong.\n     */\n    public get loadContentCallback(): (\n        contentId: string\n    ) => Promise<IPlayerModel> {\n        return this.privateLoadContentCallback;\n    }\n\n    public set loadContentCallback(\n        callback: (contentId: string) => Promise<IPlayerModel>\n    ) {\n        const mustRender = this.privateLoadContentCallback !== callback;\n        this.privateLoadContentCallback = callback;\n        if (mustRender) {\n            this.render(this.contentId);\n        }\n    }\n\n    /**\n     * Indicates changes to which attributes should trigger calls to\n     * attributeChangedCallback.\n     * @memberof H5PPlayerComponent\n     */\n    static get observedAttributes(): string[] {\n        return ['content-id'];\n    }\n    constructor() {\n        super();\n\n        H5PPlayerComponent.initTemplate();\n    }\n\n    private static template: HTMLTemplateElement;\n    private playerModel: IPlayerModel;\n    private privateLoadContentCallback: (\n        contentId: string\n    ) => Promise<IPlayerModel>;\n    private resizeObserver: ResizeObserver;\n    private root: HTMLElement;\n    private h5pInstanceInternal: IH5PInstance;\n    private h5pObjectInternal: IH5P;\n    private h5pWindowInternal: any;\n\n    private static initTemplate(): void {\n        // We create the static template only once\n        if (!H5PPlayerComponent.template) {\n            H5PPlayerComponent.template = document.createElement('template');\n            H5PPlayerComponent.template.innerHTML = `\n                <style>\n                    .h5p-iframe {\n                        font-family: Sans-Serif;\n                        width: 100%;\n                        margin: 0;\n                        padding: 0;\n                    }\n                    .h5p-iframe .h5p-container {\n                        overflow: hidden;\n                    }\n                    .h5p-iframe .h5p-content {\n                        font-size: 16px;\n                        line-height: 1.5em;\n                        width: 100%;\n                        height: auto;\n                    }\n                    .h5p-iframe .h5p-fullscreen .h5p-content,\n                    .h5p-fullscreen .h5p-iframe,\n                    .h5p-iframe .h5p-semi-fullscreen .h5p-content {\n                        height: 100%;\n                    }\n                </style>\n                <div class=\"h5p-player-component-root\"></div>\n                `;\n        }\n    }\n\n    /**\n     * Called when one of the attributes in observedAttributes changes.\n     */\n    async attributeChangedCallback(\n        name: string,\n        oldVal: any,\n        newVal: any\n    ): Promise<void> {\n        if (name === 'content-id') {\n            if (oldVal) {\n                removeUnusedContent(oldVal);\n            }\n            await this.render(newVal);\n        }\n    }\n\n    /**\n     * Called when the component is added to the DOM.\n     */\n    connectedCallback(): void {\n        this.appendChild(H5PPlayerComponent.template.content.cloneNode(true));\n        this.root = this.querySelector('.h5p-player-component-root');\n\n        // We must notify the H5P content inside the player that the size of the\n        // component has changed. Otherwise some content types won't resize\n        // properly.\n        this.resizeObserver = new ResizeObserver(() => {\n            if (window.H5P?.instances) {\n                window.H5P.instances.forEach((instance) => {\n                    instance.trigger('resize');\n                });\n            }\n        });\n        this.resizeObserver.observe(this);\n    }\n\n    /**\n     * Called when the component is removed from the DOM.\n     */\n    disconnectedCallback(): void {\n        if (this.contentId) {\n            removeUnusedContent(this.contentId);\n        }\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n        if (window.H5P?.externalDispatcher) {\n            window.H5P.externalDispatcher.off(\n                'initialized',\n                this.onContentInitialized\n            );\n            window.H5P.externalDispatcher.off('xAPI', this.onxAPI);\n        }\n    }\n\n    /**\n     * Returns the copyright notice in HTML that you can insert somewhere to\n     * display it. Undefined if there is no copyright information.\n     */\n    public getCopyrightHtml(): string | undefined {\n        if (!this.h5pInstance) {\n            console.error(\n                'Cannot show copyright as H5P instance is undefined. The H5P object might not be initialized yet.'\n            );\n            return undefined;\n        }\n        if (!this.h5pObject) {\n            console.error(\n                'H5P object undefined. This typically means H5P has not been initialized yet.'\n            );\n            return undefined;\n        }\n\n        let metadata = this.h5pInstance.contentData?.metadata;\n        if (!metadata) {\n            metadata =\n                this.playerModel.integration.contents[\n                    `cid-${this.playerModel.contentId}`\n                ].metadata;\n            if (!metadata) {\n                return undefined;\n            }\n        }\n\n        let parameters: any;\n        // We need to call JSON.parse in the context of the window the H5P\n        // content exists in. The reason is that H5P.getCopyrights compares\n        // object prototypes when traversing the parameters and the object\n        // prototypes are not identical across windows.  (Cp.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof#instanceof_and_multiple_context_e.g._frames_or_windows)\n        try {\n            parameters = this.h5pWindow.JSON.parse(\n                this.playerModel.integration.contents[\n                    `cid-${this.playerModel.contentId}`\n                ].jsonContent\n            );\n        } catch (error: any) {\n            console.error(\n                'Could not get parameters for content object with id ',\n                this.playerModel.contentId,\n                '. The copyright text might be incomplete. Details: ',\n                error\n            );\n        }\n\n        return this.h5pObject.getCopyrights(\n            this.h5pInstance,\n            parameters,\n            this.playerModel.contentId,\n            metadata\n        );\n    }\n\n    /**\n     * @returns true if there is copyright information to be displayed.\n     */\n    public hasCopyrightInformation(): boolean {\n        return !!this.getCopyrightHtml();\n    }\n\n    /**\n     * Asks the H5P content to resize itself inside the dimensions of the\n     * container.\n     *\n     * Has no effect until the H5P object has fully initialized.\n     */\n    public resize(): void {\n        if (!this.h5pInstance || !this.h5pInstance.trigger) {\n            return;\n        }\n        this.h5pInstance.trigger('resize');\n    }\n\n    /**\n     * Displays the copyright notice in the regular H5P way.\n     */\n    public showCopyright(): void {\n        const copyrightHtml = this.getCopyrightHtml();\n        const dialog = new this.h5pObject.Dialog(\n            'copyrights',\n            this.h5pObject.t('copyrightInformation'),\n            copyrightHtml,\n            this.h5pObject.jQuery('.h5p-container')\n        );\n        dialog.open(true);\n    }\n\n    /**\n     * Called when any H5P content signals that it was initialized\n     */\n    private onContentInitialized = (): void => {\n        const divMode = this.playerModel.embedTypes.includes('div');\n        this.h5pObject = divMode\n            ? window.H5P\n            : (\n                  document.getElementById(\n                      `h5p-iframe-${this.playerModel.contentId}`\n                  ) as HTMLIFrameElement\n              ).contentWindow.H5P;\n        this.h5pWindow = divMode\n            ? window\n            : (\n                  document.getElementById(\n                      `h5p-iframe-${this.playerModel.contentId}`\n                  ) as HTMLIFrameElement\n              ).contentWindow;\n        this.h5pInstance = this.h5pObject?.instances?.find(\n            // H5P converts our string contentId into number, so we don't use ===\n            // eslint-disable-next-line eqeqeq\n            (i) => i.contentId == this.contentId\n        );\n        if (this.h5pInstance) {\n            this.dispatchEvent(\n                new CustomEvent('initialized', {\n                    detail: { contentId: this.contentId }\n                })\n            );\n            if (window.H5P?.externalDispatcher) {\n                window.H5P.externalDispatcher.off(\n                    'initialized',\n                    this.onContentInitialized\n                );\n            }\n        }\n    };\n\n    private onxAPI = (event: IxAPIEvent): void => {\n        if (\n            `${event.data?.statement?.object?.definition?.extensions['http://h5p.org/x-api/h5p-local-content-id']}` ===\n            `${this.playerModel.contentId}`\n        ) {\n            const context: IContext = {\n                contentId: this.playerModel.contentId\n            };\n            this.dispatchEvent(\n                new CustomEvent('xAPI', {\n                    detail: {\n                        statement: event.data.statement,\n                        context,\n                        event\n                    }\n                })\n            );\n        }\n    };\n\n    /**\n     * Displays content.\n     * @param {string} contentId\n     */\n    private async render(contentId: string): Promise<void> {\n        if (!this.loadContentCallback) {\n            return;\n        }\n        // Get data from H5P server\n        try {\n            this.playerModel = await this.loadContentCallback(contentId);\n        } catch (error) {\n            this.root.innerHTML = `<p>Error loading H5P content from server: ${error.message}</p>`;\n            return;\n        }\n\n        // Reset the component's DOM\n        this.root.innerHTML = '';\n\n        // We have to prevent H5P from initializing when the h5p.js file is\n        // loaded.\n        if (!window.H5P) {\n            window.H5P = {} as any;\n        }\n        window.H5P.preventInit = true;\n\n        // We merge the H5P integration we received from the server with the one\n        // that already exists in the window globally to allow for several H5P\n        // content objects on a single page.\n        mergeH5PIntegration(\n            this.playerModel.integration,\n            this.playerModel.contentId\n        );\n\n        // The server has already told us which embed types are generally\n        // acceptable for the content type, but we prefer div if possible to\n        // avoid too many iframes.\n        if (this.playerModel.embedTypes.includes('div')) {\n            await this.renderDiv(this.playerModel);\n        } else {\n            await this.renderIframe(this.playerModel);\n        }\n\n        // Initialize H5P with the component as root\n        window.H5P.preventInit = false;\n        if (window.H5P.externalDispatcher) {\n            window.H5P.externalDispatcher.on(\n                'initialized',\n                this.onContentInitialized,\n                this\n            );\n        }\n        window.H5P.preventInit = false;\n\n        if (window.H5P.externalDispatcher) {\n            // detach xAPI listener first to avoid having multiple listeners on the\n            // same content (can safely be done even if it hasn't been attached\n            // before)\n            window.H5P.externalDispatcher.off('xAPI', this.onxAPI);\n            // attach xAPI listener\n            window.H5P.externalDispatcher.on('xAPI', this.onxAPI);\n        }\n\n        window.H5P.init(this.root);\n    }\n\n    /**\n     * Creates a new DOM for the H5P using a div as container.\n     */\n    private async renderDiv(playerModel: IPlayerModel): Promise<void> {\n        addStylesheets(\n            playerModel.styles,\n            document.getElementsByTagName('head')[0]\n        );\n        await addScripts(\n            playerModel.scripts,\n            document.getElementsByTagName('head')[0]\n        );\n\n        const h5pContainerDiv = document.createElement('div');\n        h5pContainerDiv.className = 'h5p-iframe';\n        this.root.appendChild(h5pContainerDiv);\n\n        const h5pContentDiv = document.createElement('div');\n        h5pContentDiv.className = 'h5p-content';\n        h5pContentDiv.dataset.contentId = playerModel.contentId;\n        h5pContainerDiv.appendChild(h5pContentDiv);\n    }\n\n    /**\n     * Creates a new DOM for the H5P using an iframe as container.\n     * @param {IPlayerModel} playerModel\n     */\n    private async renderIframe(playerModel: IPlayerModel): Promise<void> {\n        // We don't need to load styles, as they are all loaded within the\n        // iframe.\n        await addScripts(\n            window.H5PIntegration.core.scripts,\n            document.getElementsByTagName('head')[0]\n        );\n\n        const h5pIFrameWrapper = document.createElement('div');\n        h5pIFrameWrapper.className = `h5p-iframe-wrapper`;\n        h5pIFrameWrapper.innerHTML = `<iframe id=\"h5p-iframe-${playerModel.contentId}\"\n        class=\"h5p-iframe\" data-content-id=\"${playerModel.contentId}\"\n        style=\"height:1px\" src=\"about:blank\" frameBorder=\"0\" scrolling=\"no\"\n        title=\"H5P\"></iframe>`;\n        this.root.appendChild(h5pIFrameWrapper);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}