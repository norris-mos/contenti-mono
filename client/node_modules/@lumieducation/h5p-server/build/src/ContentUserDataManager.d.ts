import { ContentId, ISerializedContentUserData, IUser, IContentUserDataStorage, IContentUserData } from '@lumieducation/h5p-server/build/src/types';
/**
 * The ContentUserDataManager takes care of saving user data and states. It only
 * contains storage-agnostic functionality and depends on a
 * ContentUserDataStorage object to do the actual persistence.
 */
export default class ContentUserDataManager {
    private contentUserDataStorage;
    /**
     * @param contentUserDataStorage The storage object
     */
    constructor(contentUserDataStorage: IContentUserDataStorage);
    /**
     * Deletes a contentUserData object for given contentId and userId. Throws
     * errors if something goes wrong.
     * @param user the user for which the contentUserData object should be
     * deleted
     */
    deleteAllContentUserDataByUser(user: IUser): Promise<void>;
    deleteInvalidatedContentUserDataByContentId(contentId: ContentId): Promise<void>;
    deleteAllContentUserDataByContentId(contentId: ContentId): Promise<void>;
    /**
     * Loads the contentUserData for given contentId, dataType and subContentId
     * @param contentId The id of the content to load user data from
     * @param dataType Used by the h5p.js client
     * @param subContentId The id provided by the h5p.js client call
     * @param user The user who is accessing the h5p
     * @returns the saved state as string or undefined when not found
     */
    getContentUserData(contentId: ContentId, dataType: string, subContentId: string, user: IUser): Promise<IContentUserData>;
    /**
     * Loads the content user data for given contentId and user. The returned data
     * is an array of IContentUserData where the position in the array
     * corresponds with the subContentId or undefined if there is no
     * content user data.
     *
     * @param contentId The id of the content to load user data from
     * @param user The user who is accessing the h5p
     * @returns an array of IContentUserData or undefined if no content user data
     * is found.
     */
    generateContentUserDataIntegration(contentId: ContentId, user: IUser): Promise<ISerializedContentUserData[]>;
    /**
     * Saves data when a user completes content.
     * @param contentId The content id to delete.
     * @param score the score the user reached as an integer
     * @param maxScore the maximum score of the content
     * @param openedTimestamp the time the user opened the content as UNIX time
     * @param finishedTimestamp the time the user finished the content as UNIX
     * time
     * @param completionTime the time the user needed to complete the content
     * (as integer)
     * @param user The user who triggers this method via /setFinished
     */
    setFinished(contentId: ContentId, score: number, maxScore: number, openedTimestamp: number, finishedTimestamp: number, completionTime: number, user: IUser): Promise<void>;
    /**
     * Saves the contentUserData for given contentId, dataType and subContentId
     * @param contentId The id of the content to load user data from
     * @param dataType Used by the h5p.js client
     * @param subContentId The id provided by the h5p.js client call
     * @param userState The userState as string
     * @param user The user who owns this object
     * @returns the saved state as string
     */
    createOrUpdateContentUserData(contentId: ContentId, dataType: string, subContentId: string, userState: string, invalidate: boolean, preload: boolean, user: IUser): Promise<void>;
}
